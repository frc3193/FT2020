// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/ShooterUnity.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShooterUnity::ShooterUnity(): frc::Command() {
    // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShooterUnity::ShooterUnity(double speed): frc::Command() {
	Requires(Robot::shooter.get());
    speedvalue = speed; 
}


// Called just before this Command runs the first time
void ShooterUnity::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void ShooterUnity::Execute() {
    if (Robot::shooter->isShoot){
        double targetVelPer100ms = Robot::shooter->rpmToDeltaPer100ms(Robot::shooter->targetSpeed);
        Robot::shooter->shooterLeft->Set(ControlMode::Velocity, targetVelPer100ms);
    }
    else {
        Robot::shooter->shooterLeft->Set(speedvalue);
    }
}

// Make this return true when this Command no longer needs to run execute()
bool ShooterUnity::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ShooterUnity::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterUnity::Interrupted() {

}
