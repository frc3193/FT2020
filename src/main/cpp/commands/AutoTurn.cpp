// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/AutoTurn.h"
#include "frc/smartdashboard/SmartDashboard.h"

AutoTurn::AutoTurn(double degrees): frc::PIDCommand("AutoTurn", kP, kI, kD) { 
    Requires(Robot::driveTrain.get());

    GetPIDController()->SetContinuous(false);
    GetPIDController()->SetAbsoluteTolerance(0.2);

    kP = frc::SmartDashboard::GetNumber("AutoTurn P", 0.05);
    kI = frc::SmartDashboard::GetNumber("AutoTurn I", 0.0);
    kD = frc::SmartDashboard::GetNumber("AutoTurn D", 0.0);
    GetPIDController()->SetPID(kP, kI, kD);

    //SetSetpointRelative(90.0); // takes current setpoint (not current angle!!!) and adds to it
    //SetSetpoint(Robot::driveTrain->imu->GetAngle() + 90.0);
    SetSetpoint(degrees);
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoTurn::AutoTurn(): frc::PIDCommand("AutoTurn", 0.05, 0.0, 0.0, 0.02) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        GetPIDController()->SetContinuous(false);
        GetPIDController()->SetAbsoluteTolerance(0.2);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    
    //SetSetpointRelative(90.0); // takes current setpoint (not current angle!!!) and adds to it
    //SetSetpoint(Robot::driveTrain->imu->GetAngle() + 90.0);
    SetSetpoint(90.0);
}

double AutoTurn::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        //return Robot::driveTrain->GetFakeGyro()->PIDGet();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE

        return Robot::driveTrain->imu->GetAngle();
    }

void AutoTurn::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    //Robot::driveTrain->GetFakeSC()->PIDWrite(output);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    //Robot::driveTrain->diffDrive->ArcadeDrive(0.0, output);
    Robot::driveTrain->GyroMotor->Set(output);
    frc::SmartDashboard::PutNumber("AutoTurn Output", output);

}

// Called just before this Command runs the first time
void AutoTurn::Initialize() {
    frc::SmartDashboard::PutNumber("AutoTurn timesCalled", ++timesCalled);

    kP = frc::SmartDashboard::GetNumber("AutoTurn P", 0.05);
    kI = frc::SmartDashboard::GetNumber("AutoTurn I", 0.0);
    kD = frc::SmartDashboard::GetNumber("AutoTurn D", 0.0);
    GetPIDController()->SetPID(kP, kI, kD);

    frc::SmartDashboard::PutNumber("AutoTurn P", kP);
    frc::SmartDashboard::PutNumber("AutoTurn I", kI);
    frc::SmartDashboard::PutNumber("AutoTurn D", kD);

}

// Called repeatedly when this Command is scheduled to run
void AutoTurn::Execute() {
    frc::SmartDashboard::PutNumber("AutoTurn GetSetpoint", GetSetpoint());
    frc::SmartDashboard::PutNumber("AutoTurn PIDGet", PIDGet());
}

// Make this return true when this Command no longer needs to run execute()
bool AutoTurn::IsFinished() {
    return GetPIDController()->OnTarget();
}

// Called once after isFinished returns true

void AutoTurn::End() {
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoTurn::Interrupted() {
}