// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AutoGroup1.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/BuddyLiftReliese.h"
#include "Commands/DecreaseShooterSpeed.h"
#include "Commands/Delay.h"
#include "Commands/DoNothing.h"
#include "Commands/Drive.h"
#include "Commands/DriveReverse.h"
#include "Commands/ElevatorDefault.h"
#include "Commands/ElevatorForward.h"
#include "Commands/ElevatorReverse.h"
#include "Commands/HookPull.h"
#include "Commands/Hooksdefault.h"
#include "Commands/Hooksrelease.h"
#include "Commands/IncreaseShooterSpeed.h"
#include "Commands/IntakeDefault.h"
#include "Commands/IntakeForword.h"
#include "Commands/IntakeReverse.h"
#include "Commands/IntakeToggle.h"
#include "Commands/ShiftCommand.h"
#include "Commands/ShooterDefault.h"
#include "Commands/ShooterToggle.h"
#include "Commands/TimedElevator.h"
#include "Commands/TimedIntake.h"
#include "Commands/WinchDefault.h"
#include "Commands/WinchDown.h"
#include "Commands/Winchup.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "commands/AutoTurn.h"
OI::OI() {
    // Process operator interface input here.

coPilot.reset(new frc::Joystick(1));

startButton.reset(new frc::JoystickButton(coPilot.get(), 7));
startButton->WhileHeld(new WinchDown());
optionsButton.reset(new frc::JoystickButton(coPilot.get(), 6));
optionsButton->WhileHeld(new IntakeReverse());
rightStickIn2.reset(new frc::JoystickButton(coPilot.get(), 10));
rightStickIn2->WhileHeld(new IncreaseShooterSpeed());
leftStickIn2.reset(new frc::JoystickButton(coPilot.get(), 9));
leftStickIn2->WhileHeld(new DecreaseShooterSpeed());
rightButton2.reset(new frc::JoystickButton(coPilot.get(), 6));
rightButton2->WhileHeld(new ShooterToggle());
leftBumper2.reset(new frc::JoystickButton(coPilot.get(), 5));
leftBumper2->WhileHeld(new IntakeForword());
x2.reset(new frc::JoystickButton(coPilot.get(), 3));
x2->WhileHeld(new ElevatorForward());
b2.reset(new frc::JoystickButton(coPilot.get(), 2));
b2->WhileHeld(new ElevatorReverse());
y2.reset(new frc::JoystickButton(coPilot.get(), 4));
y2->WhenPressed(new Winchup());
a2.reset(new frc::JoystickButton(coPilot.get(), 1));
a2->WhenPressed(new IntakeReverse());
driver.reset(new frc::Joystick(0));

rightStickIn.reset(new frc::JoystickButton(driver.get(), 10));
rightStickIn->WhileHeld(new DoNothing());
leftstickIn.reset(new frc::JoystickButton(driver.get(), 9));
leftstickIn->WhenPressed(new DoNothing());
leftBumper.reset(new frc::JoystickButton(driver.get(), 5));
leftBumper->WhileHeld(new DriveReverse());
x.reset(new frc::JoystickButton(driver.get(), 3));
x->WhileHeld(new DoNothing());
b.reset(new frc::JoystickButton(driver.get(), 2));
b->WhenPressed(new DoNothing());
rightBumper.reset(new frc::JoystickButton(driver.get(), 6));
rightBumper->WhenPressed(new ShiftCommand());
y.reset(new frc::JoystickButton(driver.get(), 4));
y->WhenPressed(new DoNothing());
a.reset(new frc::JoystickButton(driver.get(), 1));
a->WhenPressed(new DoNothing());

    // SmartDashboard Buttons
    /*frc::SmartDashboard::PutData("DriveReverse", new DriveReverse());
    frc::SmartDashboard::PutData("TimedElevator", new TimedElevator());
    frc::SmartDashboard::PutData("TimedIntake", new TimedIntake());
    frc::SmartDashboard::PutData("Delay", new Delay());
    frc::SmartDashboard::PutData("AutoGroup1", new AutoGroup1());
    frc::SmartDashboard::PutData("BuddyLiftReliese", new BuddyLiftReliese());
    frc::SmartDashboard::PutData("IntakeToggle", new IntakeToggle());
    frc::SmartDashboard::PutData("HookPull", new HookPull());
    frc::SmartDashboard::PutData("WinchDown", new WinchDown());
    frc::SmartDashboard::PutData("Hooksrelease", new Hooksrelease());
    frc::SmartDashboard::PutData("Hooksdefault", new Hooksdefault());
    frc::SmartDashboard::PutData("WinchDefault", new WinchDefault());
    frc::SmartDashboard::PutData("Winchup", new Winchup());
    frc::SmartDashboard::PutData("ShiftCommand", new ShiftCommand());
    frc::SmartDashboard::PutData("ElevatorDefault", new ElevatorDefault());
    frc::SmartDashboard::PutData("ElevatorReverse", new ElevatorReverse());
    frc::SmartDashboard::PutData("ElevatorForward", new ElevatorForward());
    frc::SmartDashboard::PutData("IntakeDefault", new IntakeDefault());
    frc::SmartDashboard::PutData("IntakeForword", new IntakeForword());
    frc::SmartDashboard::PutData("IntakeReverse", new IntakeReverse());
    frc::SmartDashboard::PutData("Drive", new Drive());
    frc::SmartDashboard::PutData("ShooterDefault", new ShooterDefault());
    frc::SmartDashboard::PutData("ShooterToggle", new ShooterToggle());
    frc::SmartDashboard::PutData("DecreaseShooterSpeed", new DecreaseShooterSpeed());
    frc::SmartDashboard::PutData("IncreaseShooterSpeed", new IncreaseShooterSpeed());
    frc::SmartDashboard::PutData("DoNothing", new DoNothing());
    frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
*/

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDriver() {
   return driver;
}

std::shared_ptr<frc::Joystick> OI::getCoPilot() {
   return coPilot;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
