// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DecreaseShooterSpeed.h"
#include "Commands/DoNothing.h"
#include "Commands/Drive.h"
#include "Commands/ElevatorDefault.h"
#include "Commands/ElevatorForward.h"
#include "Commands/ElevatorReverse.h"
#include "Commands/IncreaseShooterSpeed.h"
#include "Commands/IntakeDefault.h"
#include "Commands/IntakeForword.h"
#include "Commands/IntakeReverse.h"
#include "Commands/LiftDefault.h"
#include "Commands/LiftDown.h"
#include "Commands/LiftUp.h"
#include "Commands/ShiftCommand.h"
#include "Commands/ShooterDefault.h"
#include "Commands/ShooterToggle.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
coPilot.reset(new frc::Joystick(1));

rightStickIn2.reset(new frc::JoystickButton(coPilot.get(), 10));
rightStickIn2->WhileHeld(new DoNothing());
leftStickIn2.reset(new frc::JoystickButton(coPilot.get(), 9));
leftStickIn2->WhileHeld(new DoNothing());
rightButton2.reset(new frc::JoystickButton(coPilot.get(), 6));
rightButton2->WhileHeld(new DoNothing());
leftBumper2.reset(new frc::JoystickButton(coPilot.get(), 5));
leftBumper2->WhileHeld(new DoNothing());
x2.reset(new frc::JoystickButton(coPilot.get(), 3));
x2->WhileHeld(new DoNothing());
b2.reset(new frc::JoystickButton(coPilot.get(), 2));
b2->WhileHeld(new DoNothing());
y2.reset(new frc::JoystickButton(coPilot.get(), 4));
y2->WhileHeld(new ElevatorReverse());
a2.reset(new frc::JoystickButton(coPilot.get(), 1));
a2->WhileHeld(new ElevatorForward());
driver.reset(new frc::Joystick(0));

rightStickIn.reset(new frc::JoystickButton(driver.get(), 10));
rightStickIn->WhileHeld(new LiftUp());
leftstickIn.reset(new frc::JoystickButton(driver.get(), 9));
leftstickIn->WhileHeld(new LiftDown());
leftBumper.reset(new frc::JoystickButton(driver.get(), 5));
leftBumper->WhenPressed(new ShiftCommand());
x.reset(new frc::JoystickButton(driver.get(), 3));
x->WhileHeld(new IntakeForword());
b.reset(new frc::JoystickButton(driver.get(), 2));
b->WhileHeld(new IntakeReverse());
rightBumper.reset(new frc::JoystickButton(driver.get(), 6));
rightBumper->WhenPressed(new ShooterToggle());
y.reset(new frc::JoystickButton(driver.get(), 4));
y->WhenPressed(new IncreaseShooterSpeed());
a.reset(new frc::JoystickButton(driver.get(), 1));
a->WhenPressed(new DecreaseShooterSpeed());

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("ShiftCommand", new ShiftCommand());
    frc::SmartDashboard::PutData("LiftDown", new LiftDown());
    frc::SmartDashboard::PutData("LiftUp", new LiftUp());
    frc::SmartDashboard::PutData("LiftDefault", new LiftDefault());
    frc::SmartDashboard::PutData("ElevatorDefault", new ElevatorDefault());
    frc::SmartDashboard::PutData("ElevatorReverse", new ElevatorReverse());
    frc::SmartDashboard::PutData("ElevatorForward", new ElevatorForward());
    frc::SmartDashboard::PutData("IntakeDefault", new IntakeDefault());
    frc::SmartDashboard::PutData("IntakeForword", new IntakeForword());
    frc::SmartDashboard::PutData("IntakeReverse", new IntakeReverse());
    frc::SmartDashboard::PutData("Drive", new Drive());
    frc::SmartDashboard::PutData("ShooterDefault", new ShooterDefault());
    frc::SmartDashboard::PutData("ShooterToggle", new ShooterToggle());
    frc::SmartDashboard::PutData("DecreaseShooterSpeed", new DecreaseShooterSpeed());
    frc::SmartDashboard::PutData("IncreaseShooterSpeed", new IncreaseShooterSpeed());
    frc::SmartDashboard::PutData("DoNothing", new DoNothing());
    frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDriver() {
   return driver;
}

std::shared_ptr<frc::Joystick> OI::getCoPilot() {
   return coPilot;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
